type FailedRelayedFastMessage @entity(immutable: true) {
  id: Bytes!
  target: Bytes! # address
  sender: Bytes! # address
  message: Bytes! # bytes
  messageNonce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FailedRelayedMessage @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MessageAllowed @entity(immutable: true) {
  id: Bytes!
  _xDomainCalldataHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MessageBlocked @entity(immutable: true) {
  id: Bytes!
  _xDomainCalldataHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RelayedFastMessage @entity(immutable: true) {
  id: Bytes!
  target: Bytes! # address
  sender: Bytes! # address
  message: Bytes! # bytes
  messageNonce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RelayedMessage @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SentMessage @entity(immutable: true) {
  id: Bytes!
  target: Bytes! # address
  sender: Bytes! # address
  message: Bytes! # bytes
  messageNonce: BigInt! # uint256
  gasLimit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type StateBatchAppended @entity(immutable: true) {
  id: Bytes!
  _batchIndex: BigInt! # uint256
  _batchRoot: Bytes! # bytes32
  _batchSize: BigInt! # uint256
  _prevTotalElements: BigInt! # uint256
  _extraData: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  rollUpBatch: BigInt!
}

type StateBatchDeleted @entity(immutable: true) {
  id: Bytes!
  _batchIndex: BigInt! # uint256
  _batchRoot: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ERC20DepositInitiated @entity(immutable: true) {
  id: Bytes!
  _l1Token: Bytes! # address
  _l2Token: Bytes! # address
  _from: Bytes! # address
  _to: Bytes! # address
  _amount: BigInt! # uint256
  _data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ERC20WithdrawalFinalized @entity(immutable: true) {
  id: Bytes!
  _l1Token: Bytes! # address
  _l2Token: Bytes! # address
  _from: Bytes! # address
  _to: Bytes! # address
  _amount: BigInt! # uint256
  _data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ETHDepositInitiated @entity(immutable: true) {
  id: Bytes!
  _from: Bytes! # address
  _to: Bytes! # address
  _amount: BigInt! # uint256
  _data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ETHWithdrawalFinalized @entity(immutable: true) {
  id: Bytes!
  _from: Bytes! # address
  _to: Bytes! # address
  _amount: BigInt! # uint256
  _data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
